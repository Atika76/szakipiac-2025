// File: supabase/functions/generate-ad/index.ts
// ‚úÖ 2025-10-10 ‚Äì Profi Gemini hirdet√©sgener√°tor Supabase-hez (C√≠m + Alc√≠m + Le√≠r√°s + CTA)

import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const GEMINI_API_KEY = Deno.env.get("GEMINI_API_KEY");
    if (!GEMINI_API_KEY) {
      throw new Error("‚ùå Gemini API kulcs nincs be√°ll√≠tva a Supabase Secrets-ben.");
    }

    const { keywords } = await req.json();
    if (!keywords || typeof keywords !== "string" || keywords.trim() === "") {
      throw new Error("‚ö†Ô∏è K√©rlek, adj meg kulcsszavakat a gener√°l√°shoz.");
    }

    const modelName = "gemini-1.5-flash";

    // üß† Profi prompt marketinges hirdet√©s gener√°l√°s√°hoz
    const prompt = `
Te egy profi magyar marketing sz√∂veg√≠r√≥ vagy. A feladatod, hogy a k√∂vetkez≈ë kulcsszavak alapj√°n
figyelemfelkelt≈ë, √©rt√©kes√≠t√©st √∂szt√∂nz≈ë hirdet√©st √≠rj magyar nyelven.

Kulcsszavak: ${keywords}

üìã A hirdet√©s szerkezete:
- "cim": r√∂vid, √ºt≈ës f≈ëc√≠m (max. 10 sz√≥)
- "alcim": 1 mondatos kiemel√©s, ami bizalmat kelt vagy el≈ënyt hangs√∫lyoz
- "leiras": 4-6 mondatos, meggy≈ëz≈ë le√≠r√°s. Tartalmazzon:
   * el≈ëny√∂ket (pl. gyors, garanci√°s, tapasztalt),
   * √°rpozicion√°l√°st (pl. "m√°r X Ft-t√≥l", "ingyenes felm√©r√©s"),
   * probl√©ma‚Äìmegold√°s logik√°t,
   * bizalom√©p√≠t√©st (referencia, szak√©rtelem),
   * marketinges hangv√©telt.
- "cta": r√∂vid cselekv√©sre √∂szt√∂nz≈ë sor (pl. ‚ÄûK√©rjen aj√°nlatot most!‚Äù, ‚ÄûH√≠vjon m√©g ma!‚Äù)

‚ö†Ô∏è A v√°lasz KIZ√ÅR√ìLAG √©rv√©nyes JSON objektum legyen, √≠gy:
{
  "cim": "R√∂vid c√≠m",
  "alcim": "Egy mondat kiemel√©s",
  "leiras": "R√©szletes le√≠r√°s, el≈ëny√∂k, √°r, garancia, bizalom√©p√≠t√©s, CTA sz√∂veg n√©lk√ºl.",
  "cta": "Cselekv√©sre √∂szt√∂nz≈ë sor"
}
`;

    const geminiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/${modelName}:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
        }),
      },
    );

    if (!geminiResponse.ok) {
      const errorBody = await geminiResponse.text();
      console.error("Google API hiba:", errorBody);
      throw new Error(`Gemini API hiba: ${errorBody}`);
    }

    const geminiData = await geminiResponse.json();
    const generatedText = geminiData?.candidates?.[0]?.content?.parts?.[0]?.text || "";

    // JSON objektum kiv√©tele
    const jsonMatch = generatedText.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      console.error("Gemini nyers v√°lasz:", generatedText);
      throw new Error("A Gemini nem adott vissza √©rv√©nyes JSON objektumot.");
    }

    const adContent = JSON.parse(jsonMatch[0]);

    return new Response(JSON.stringify(adContent), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 200,
    });

  } catch (error) {
    console.error("Hiba a Supabase Function-ben:", error.message);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 500,
    });
  }
});
